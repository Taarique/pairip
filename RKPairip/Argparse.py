from.C_M import CM
C=CM()
class ArgumentParser:
	def parse_arguments(H):
		F='Merge';E='input';B='store_true'
		class G(C.argparse.ArgumentParser):
			def error(G,message):
				D=message;B=''
				for A in G._actions:
					if A.option_strings and any(A in D for A in A.option_strings):
						if A.dest==E:B=f'\n{C.lb}[ {C.y}FYI ! {C.lb}] {C.g}Make Sure There Is "No Extra Space" In The Folder/Apk Name In The Input Text. If Yes, Then Remove Extra Space & Correct It By Renaming It.\n\n\n{C.lb}[ {C.pr}* {C.lb}] {C.c}With APKEditor ( Default )\n\n\n{C.lb}[ {C.y}Ex. {C.lb}] {C.g}RKPairip -i YourApkPath.apk\n\n\n{C.lb}[ {C.pr}* {C.lb}] {C.c}With APKTool Use {C.rkj}-a {C.c}Flag\n\n\n{C.lb}[ {C.y}Ex. {C.lb}] {C.g}RKPairip -i YourApkPath.apk {C.rkj}-a\n\n\n{C.lb}[ {C.pr}* {C.lb}] {C.c}With Bak_Smali Use {C.rkj}-b {C.c}Flag ( Unzip / Zip ){C.c}\n\n\n{C.lb}[ {C.y}Ex. {C.lb}] {C.g}RKPairip -i YourApkPath.apk {C.rkj}-b\n\n\n{C.lb}[ {C.pr}* {C.lb}] {C.c}Delete SignatureCheck & LicenseClientV3 .smali Use {C.rkj}-d {C.c}Flag ( Default Is Set, Just Bypass )\n\n\n{C.lb}[ {C.y}Ex. {C.lb}] {C.g}RKPairip -i YourApkPath.apk {C.rkj}-d\n\n\n{C.lb}[ {C.pr}* {C.lb}] {C.c}Merge Skip Use {C.rkj}-s {C.c}Flag ( Do U Want Last Dex Add Seprate For Dex Redivision )\n\n\n{C.lb}[ {C.y}Ex. {C.lb}] {C.g}RKPairip -i YourApkPath.apk {C.rkj}-s\n\n\n{C.lb}[ {C.pr}* {C.lb}] {C.c}Pairip Dex Fix Use {C.rkj}-r {C.c}Flag ( Try After Translate String to MT )\n\n\n{C.lb}[ {C.y}Ex. {C.lb}] {C.g}RKPairip -i YourApkPath.apk {C.rkj}-r\n\n\n{C.lb}[ {C.pr}* {C.lb}] {C.c}If Failed SigCopy Use Another Method ( Default apksigcopier, Use only with -a & -b ) {C.rkj}-a -s2 {C.y}/ {C.rkj}-b -s2 \n\n\n{C.lb}[ {C.y}Ex. {C.lb}] {C.g}RKPairip -i YourApkPath.apk {C.rkj}-a {C.rkj}-s2\n'
						elif A.dest==F:B=f'\n{C.lb}[ {C.y}INFO {C.lb}] {C.c}Only Merge Apk\n\n\n{C.lb}[ {C.y}INFO {C.lb}] {C.c}Merge Extension {C.y}( .apks/.xapk/.apkm )\n\n\n{C.lb}[ {C.y}Ex. {C.lb}] {C.g}RKPairip {C.rkj}-m {C.g}Your_Apk_Path.apks\n'
						break
				exit(f"\n{C.lb}[ {C.rd}Error ! {C.lb}] {C.rd} {D}\n\n{B}")
		A=G(description=f"{C.c}RKPairip Script")if any(A.startswith('-')for A in C.sys.argv[1:])else C.argparse.ArgumentParser(description=f"{C.c}RKPairip Script");D=A.add_mutually_exclusive_group(required=True);D.add_argument('-i',dest=E,help=f"{C.y}➸ {C.g}Input APK Path...{C.c}");D.add_argument('-m',dest=F,help=f"{C.y}➸ {C.g}Anti-Split ( Only Merge Apk ){C.c}");D.add_argument('-c',dest='Credits_Instruction',action=B,help=f"{C.y}➸ {C.g}Show Instructions & Credits{C.c}");A.add_argument('-a','--ApkTool',action=B,help=f"{C.y}➸ {C.g}ApkTool ( Fast, But Not Stable Comparison To APKEditor ){C.c}");A.add_argument('-b','--Bak_Smali',action=B,help=f"{C.y}➸ {C.g}Bak_Smali ( Fast, But Not Stable Comparison To APKEditor & APKTool ){C.c}");A.add_argument('-d','--delete',action=B,help=f"{C.y}➸ {C.g}Do You Want To Delete SignatureCheck & LicenseClientV3 .smali, Default Is Set, Just Bypass{C.c}");A.add_argument('-s','--mergeskip',action=B,help=f"{C.y}➸ {C.g}Do U Want Last Dex Add Seprate ( For Dex Redivision & The script will be in listen mode, so you can do Max Value Dex Redivision {C.pr}( like 65536 ) {C.g}using MT/ApkTool_M and correct the name of the APK again and then press enter in the script, which will bypass CRC ){C.c}");A.add_argument('-r','--Repair_Dex',action=B,help=f"{C.y}➸ {C.g}Pairip Dex Fix ( Try After Translate String to MT ){C.c}");A.add_argument('-s2',dest='SigCopy2',action=B,help=f"{C.y}➸{C.g} If Failed SigCopy in Apktool Use Another Method ( default apksigcopier ){C.r}");return A.parse_args()